require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe FormsController do

  include AuthHelper
  fixtures :accounts, :events, :clients

  before :each do
    @event = events(:pennsic_40)
    @client = clients(:william)
  end
  
  def mock_form(stubs={})
    @mock_form ||= mock_model(Form, stubs).as_null_object
  end

  def get_with_login(*args)
    login(:herald)
    get(*args)
  end
  
  def get_with_client(cmd, rest = {})
    rest[:client_id] = @client.id
    rest[:event_id] = @event.id
    get cmd, rest
  end
  

  def post_with_client(cmd, rest = {})
    rest[:client_id] = @client.id
    rest[:event_id] = @event.id
    post cmd, rest
  end
  

  describe "GET show" do
  
    it "requires authentication" do
      get_with_client(:show, :id => 37)
      response.status.should redirect_to(:new_session)
    end
    
    describe "when can view all clients" do
      
      before :each do 
        account = login_with_rights_for_event(@event, :view_all_clients)
      end

      it "assigns the requested form as @form when exists" do
        Form.stub(:find).with("37") { mock_form }
        get_with_client :show, :id => "37"
        assigns(:form).should be(mock_form)
      end
      
      it "gives a RecordNotFount error when not exists" do
        expect { 
          get_with_client :show, :id => "111111"}.to raise_error(
              ActiveRecord::RecordNotFound)
      end
    end
     
    describe "otherwise" do
      it "redirects to session show" do
        Form.stub(:find).with("37") { mock_form }
        account = login_with_rights_for_event(@event)
        get_with_client :show, :id => "37"
        response.status.should redirect_to(
           :controller => :session, :action => :show)
      end
    end

  end

  describe "GET new" do
  
    it "requires authentication" do
      get_with_client(:new)
      response.status.should redirect_to(:new_session)
    end
    
    describe "when has edit_client rights" do
      
      before :each do 
        @account = login_with_rights_for_event(@event, :edit_client)
      end

      it "returns 400 if no client" do
        expect {
          get :new, :event_id => @event.id,  :client_id => '11111'
        }.to raise_error(ActiveRecord::RecordNotFound)
      end
      
      it "gets the possible types when type is not set" do
        get_with_client :new
        assigns(:client).to_i.should eq(@client.id)
        assigns(:types).should eq(Form.types)
      end

      it "assigns a new form as @form when type is set" do
        NameForm.stub(:new) { mock_form }
        get_with_client :new, :type => 'name'
        assigns(:form).should be(mock_form)
      end
    end
    
    describe "otherwise" do
      it "redirects to session show" do
        account = login_with_rights_for_event(@event)
        get_with_client :new
        response.status.should redirect_to(
           :controller => :session, :action => :show)
      end
    end

  end

  describe "GET edit" do
    
    before :each do 
      @form_id = "37"
      Form.stub(:find).with("37") { mock_form }
    end
    
    it "requires authentication" do
      get_with_client(:new)
      response.status.should redirect_to(:new_session)
    end
    
    describe "when has edit_client rights" do
      
      before :each do 
        @account = login_with_rights_for_event(@event, :edit_client)
      end

      it "assigns the requested form as @form" do
        get_with_client :edit, :id => @form_id
        assigns(:form).should be(mock_form)
      end
    end
    
    describe "otherwise" do
      it "redirects to session show" do
        account = login_with_rights_for_event(@event)
        get_with_client :edit, :id => "37"
        response.status.should redirect_to(
           :controller => :session, :action => :show)
      end
    end

 end

  describe "POST create" do
    it "requires authentication" do
      get_with_client(:new)
      response.status.should redirect_to(:new_session)
    end
    
    describe "when has edit_client rights" do
 
      before :each do 
        @account = login_with_rights_for_event(@event, :edit_client)
      end
      
      describe "with valid params" do
        it "assigns a newly created form as @form" do
          Form.stub(:create).with({'these' => 'params'}) { mock_form(:save => true) }
          post_with_client :create, :form => {'these' => 'params'}
          assigns(:form).should be(mock_form)
        end

        it "redirects to client page" do
          Form.stub(:create) { mock_form(:save => true) }
          post_with_client :create, :form => {}
          response.should redirect_to(event_client_path(@client, :event_id => @event))
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved form as @form" do
          Form.stub(:create).with({'these' => 'params'}) { mock_form(:save => false) }
          post_with_client :create, :form => {'these' => 'params'}
          assigns(:form).should be(mock_form)
        end

        it "re-renders the 'new' template" do
          Form.stub(:create) { mock_form(:save => false) }
          post_with_client :create, :form => {}
          response.should render_template("new")
        end
      end
    end
    
    describe "otherwise" do
      it "redirects to session show" do
        account = login_with_rights_for_event(@event)
        Form.stub(:create) { mock_form(:save => true) }
        post_with_client  :create, :form => {}
        response.status.should redirect_to(
           :controller => :session, :action => :show)
      end
    end


  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested form" do
        Form.stub(:find).with("37") { mock_form }
        mock_form.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :form => {'these' => 'params'}
      end

      it "assigns the requested form as @form" do
        Form.stub(:find) { mock_form(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:form).should be(mock_form)
      end

      it "redirects to the form" do
        Form.stub(:find) { mock_form(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(form_url(mock_form))
      end
    end

    describe "with invalid params" do
      it "assigns the form as @form" do
        Form.stub(:find) { mock_form(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:form).should be(mock_form)
      end

      it "re-renders the 'edit' template" do
        Form.stub(:find) { mock_form(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested form" do
      Form.stub(:find).with("37") { mock_form }
      mock_form.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the forms list" do
      Form.stub(:find) { mock_form }
      delete :destroy, :id => "1"
      response.should redirect_to(forms_url)
    end
  end

end
