require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe FormsController do

  include AuthHelper
  fixtures :accounts

  def mock_form(stubs={})
    @mock_form ||= mock_model(Form, stubs).as_null_object
  end

  def get_with_login(*args)
    http_login('pennsic', 'pennsic_pwd')
    get(*args)
  end

  describe "GET show" do
    it "assigns the requested form as @form" do
      Form.stub(:find).with("37") { mock_form }
      get :show, :id => "37"
      assigns(:form).should be(mock_form)
    end
  end

  describe "GET new" do
    it "returns 400 if no client" do
      get_with_login :new
      response.status.should eq(400)
    end
    it "gets the possible types when type is not set" do
      get_with_login :new, :client => '2'
      assigns(:client).should eq('2')
      assigns(:types).should eq(Form.types)
    end

    it "assigns a new form as @form when type is set" do
      NameForm.stub(:new) { mock_form }
      get :new, {:type => 'name'}
      assigns(:form).should be(mock_form)
    end
  end

  describe "GET edit" do
    it "assigns the requested form as @form" do
      Form.stub(:find).with("37") { mock_form }
      get :edit, :id => "37"
      assigns(:form).should be(mock_form)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created form as @form" do
        Form.stub(:new).with({'these' => 'params'}) { mock_form(:save => true) }
        post :create, :form => {'these' => 'params'}
        assigns(:form).should be(mock_form)
      end

      it "redirects to the created form" do
        Form.stub(:new) { mock_form(:save => true) }
        post :create, :form => {}
        response.should redirect_to(form_url(mock_form))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved form as @form" do
        Form.stub(:new).with({'these' => 'params'}) { mock_form(:save => false) }
        post :create, :form => {'these' => 'params'}
        assigns(:form).should be(mock_form)
      end

      it "re-renders the 'new' template" do
        Form.stub(:new) { mock_form(:save => false) }
        post :create, :form => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested form" do
        Form.stub(:find).with("37") { mock_form }
        mock_form.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :form => {'these' => 'params'}
      end

      it "assigns the requested form as @form" do
        Form.stub(:find) { mock_form(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:form).should be(mock_form)
      end

      it "redirects to the form" do
        Form.stub(:find) { mock_form(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(form_url(mock_form))
      end
    end

    describe "with invalid params" do
      it "assigns the form as @form" do
        Form.stub(:find) { mock_form(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:form).should be(mock_form)
      end

      it "re-renders the 'edit' template" do
        Form.stub(:find) { mock_form(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested form" do
      Form.stub(:find).with("37") { mock_form }
      mock_form.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the forms list" do
      Form.stub(:find) { mock_form }
      delete :destroy, :id => "1"
      response.should redirect_to(forms_url)
    end
  end

end
