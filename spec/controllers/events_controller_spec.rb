require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe EventsController do
  include AuthHelper
  extend FixtureHelper
  render_views
  
  fixture_list event_fixtures

  def mock_event(stubs={})
    @mock_event ||= mock_model(Event, stubs).as_null_object
  end
  
  def create_accounts(*account_names)
    account_names.map do |name|
      account = Account.new(:name => name, :password => 'pwd')
      account.save!
      account
    end
  end

  describe "GET index" do
    
    it "requires authentication" do
      get :index
      response.status.should redirect_to(:new_session)
    end
  
    describe "when has modify_event right" do
      
      before :each do
        login_with_rights(:modify_event)
      end
       
      it "assigns all events as @events" do
        get :index
        response.should be_ok
        @events = Event.all
        assigns(:events).size.should be(@events.size)
        @events.each do |e|
          assigns(:events).should include(e)
        end
      end
    end
    
    describe "otherwise" do
      
      before :each do
        @account = login_with_rights
      end

      it "assigns all events associated with current account as @events" do
        @account.events << events(:pennsic_40)
        @account.events << events(:war_practice_2011)
        @account.save!
        get :index              
        response.should be_ok
        assigns(:events).should eq([events(:pennsic_40), events(:war_practice_2011)])
      end
    end
  end
    
  describe "GET show" do
    include Rails.application.routes.url_helpers
    
    fixtures :accounts, :accounts_events
    
    it "requires authentication" do
      get :show, :id => 40
      response.status.should redirect_to(:new_session)
    end

    def redirect_to_clients(event_id) 
      redirect_to(event_clients_path(:event_id => event_id))
    end
    
    it "assigns event to events" do
      login(:senior)
      get :show, :id => 40
      response.status.should redirect_to_clients(40)
    end

    it "returns not found for standard accounts not associated with the event" do
      login(:senior)
      expect {get :show, :id => 39}.to raise_error(ActiveRecord::RecordNotFound)
    end
    
    it "redirects when account has modify_event rights" do
      login_with_rights(:modify_event)
      get :show, :id => 39
      response.status.should redirect_to_clients(39)
    end
  end

  describe "GET new" do
    it "requires authentication" do
      get :new
      response.status.should redirect_to(:new_session)
    end
    
    describe "when has modify_event right" do
      
      before :each do
        login_with_rights(:modify_event)
      end
       
      it "assigns a new event as @event" do
        Event.stub(:new) { mock_event }
        get :new
        assigns(:event).should be(mock_event)
      end
      
      it "assigns accounts as @account" do
        accounts = create_accounts('aaa', 'bbb')
        Account.stub(:all) { accounts }
        get :new
        assigns(:accounts).should eq(accounts)
      end
    end
    
    describe "otherwise" do
      before :each do
        login_with_rights
      end
      
      it "is forbidden" do
        get :new
        response.status.should be(403)
      end
    end
  end

  describe "GET edit" do
    it "requires authentication" do
      get :new
      response.status.should redirect_to(:new_session)
    end
    
    describe "when has modify_event right" do
      
      before :each do
        login_with_rights(:modify_event)
      end
       
      it "assigns the requested event as @event" do
        Event.stub(:find).with("37") { mock_event }
        get :edit, :id => "37"
        assigns(:event).should be(mock_event)
      end
      
      it "assigns all accounts as @account" do
        accounts = create_accounts('a1', 'a2', 'a3', 'a4')
        Account.stub(:all) { accounts }
        Event.stub(:find).with("33") { mock_event }
        get :edit, :id => "33"
        assigns(:accounts).should eq(accounts)
      end
    end
    
    describe "otherwise" do
      before :each do
        login_with_rights
      end
      
      it "is forbidden" do
        get :edit, :id => 333
        response.status.should be(403)
      end
    end
  end

  describe "POST create" do
    it "requires authentication" do
      post :create, :event => {:title => 'Test1'}
      response.status.should redirect_to(:new_session)
    end
    
    describe "when has modify_event right" do
      
      before :each do
        @account = login_with_rights(:modify_event)
      end
     
      describe "with valid params" do
        it "assigns a newly created event as @event" do
          post :create, :event => {:title => 'Test1'}
          assigns(:event).should_not be_nil
          e = assigns(:event)
          e.title.should eq('Test1')
          e.accounts.should eq([@account])
        end
  
        it "assigns accounts to event" do
          accounts = create_accounts("a1", "a2", "a3", "a4")
          to_set = [accounts[0], accounts[2]]
          to_set_keys = Hash[to_set.map {|a| [a.id, a.id]}]
          post :create, :event => {:title => 'Test2'}, :non_members => to_set_keys
          e = assigns(:event)
          member_ids = e.account_ids
          accounts.each do |a|
            if (to_set.include?(a))
              member_ids.should include(a.id)
            else
              member_ids.should_not include(a.id) 
            end
          end
          member_ids.should include(@account.id)
        end
        
        it "redirects to all events" do
           Event.stub(:new) { mock_event(:save => true) }
          post :create, :event => {}
          response.should redirect_to(events_url)
        end
      end
      
      describe "with invalid params" do
        it "assigns a newly created but unsaved event as @event" do
          Event.stub(:new).with({'these' => 'params'}) { mock_event(:save => false) }
          post :create, :event => {'these' => 'params'}
          assigns(:event).should be(mock_event)
        end

        it "re-renders the 'new' template" do
          Event.stub(:new) { mock_event(:save => false) }
          post :create, :event => {}
          response.should render_template("new")
        end
      end
    end
  
    describe "otherwise" do
      before :each do
        login_with_rights
      end
      
      it "is forbidden" do
        post :create, :event => {:title => 'test'}
        response.status.should be(403)
      end
    end
  end

  describe "PUT update" do
    it "requires authentication" do
      post :create, :event => {:title => 'Test1'}
      response.status.should redirect_to(:new_session)
    end
    
    describe "when has modify_event right" do
      
      before :each do
        @account = login_with_rights(:modify_event)
      end
     
      describe "with valid params" do
        it "updates the requested event" do
          e = mock_event
          e.stub(:account_ids) { [2, 3, 4] }
          Event.stub(:find).with("37") { e }
          e.should_receive(:update_attributes).with({"these" => 'params',
            "account_ids" => [2, 3, 4, "1", "2"]})
          put :update, :id => "37", :event => {:these => 'params'}, 
              :non_members => {"1" => "1", "2" => "2"}
        end

        it "assigns the requested event as @event" do
          Event.stub(:find) { mock_event(:update_attributes => true) }
          put :update, :id => "1"
          assigns(:event).should be(mock_event)
        end

        it "redirects to all events" do
          @account.stub(:is_admin) { true }
          Event.stub(:find) { mock_event(:update_attributes => true) }
          put :update, :id => "1"
          response.should redirect_to(events_url)
        end

      end

      describe "with invalid params" do
        it "assigns the event as @event" do
          Event.stub(:find) { mock_event(:update_attributes => false) }
          put :update, :id => "1"
          assigns(:event).should be(mock_event)
        end

        it "re-renders the 'edit' template" do
          Event.stub(:find) { mock_event(:update_attributes => false) }
          put :update, :id => "1"
          response.should render_template("edit")
        end
      end
    end
 
    describe "otherwise" do
      before :each do
        login_with_rights
      end
      
      it "is forbidden" do
        post :create, :event => {:title => 'test'}
        response.status.should be(403)
      end
    end
  end
  
  describe "GET current" do
    it "requires authentication" do
      get :current
      response.status.should redirect_to(:new_session)
    end

    it "returns 404 when no event is current" do
      login_with_rights
      e = Event.current_event
      e.is_current = false
      e.save!
      expect {get :current}.to raise_error(ActiveRecord::RecordNotFound)
    end
    
    it "redirects to show when an event is current" do
      login_with_rights
      e = Event.current_event
      get :current
      response.status.should redirect_to(e)
    end
  end
  
  describe "PUT current" do
    it "requires authentication" do
      put :current, :event_id => 39
      response.status.should redirect_to(:new_session)
    end
    
    describe "when has set_current_event right" do
      
      before :each do
        @account = login_with_rights(:set_current_event)
        @current = Event.current_event
        @new_event = Event.where("id <> ?", @current.id).first
      end
      
      it "resets the current event" do
        put :current, :event_id => @new_event.id.to_s
        Event.all do |e|
          if (e == @new_event) 
            e.should be_current
          else
            e.should_not be_current
          end
        end
      end
      
      it "redirects to events" do
        put :current, :event_id => @new_event.id.to_s
        response.should redirect_to(:events)
      end
    end
    
    describe "otherwise" do
      before :each do
        login_with_rights
      end
      
      it "is forbidden" do
        post :create, :event => {:title => 'test'}
        response.status.should be(403)
      end
    end
  end
  
  describe "get Kingdoms" do
    it "requires authentication" do
      get :list_kingdoms, :id => 39
      response.status.should redirect_to(:new_session)
    end
    
    describe "when can view all clients" do
      
      before :each do 
        account = login_with_rights(:view_all_clients)
      end
      
    end
    
    describe "otherwise" do
      it "redirects to show" do
  #      account = login_with_rights
  #      get :list_kingdoms, :id => 39
  #      response.status.should redirect_to(:controller => :session, :action => :show)
      end
    end
 
  end
end